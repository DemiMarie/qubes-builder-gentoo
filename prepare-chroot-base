#!/bin/bash
# vim: set ts=4 sw=4 sts=4 et :

### prepare-chroot-base : create a base chroot instance of Gentoo

set -e
if [ "$VERBOSE" -ge 2 ] || [ "$DEBUG" -gt 0 ]; then
    set -x
fi

INSTALLDIR="$1"
DISTRO="$2"

[ -z "$CACHEDIR" ] && CACHEDIR="/tmp"

# shellcheck source=scripts/distribution.sh
. ${SCRIPTSDIR}/distribution.sh

if ! [ -f "${INSTALLDIR}/etc/.prepared_base" ]; then
    STAGE_FLAVOR="latest-stage3-amd64-systemd"
    GENTOO_MIRROR="${GENTOO_MIRROR:-https://mirrors.kernel.org/gentoo}"

    STAGE_DIR="${CACHEDIR}/stage"
    PORTAGE_DIR="${CACHEDIR}/portage"

    ## STAGE3
    # Get info about latest Gentoo stage3
    STAGE_INFO="${GENTOO_MIRROR}/releases/amd64/autobuilds/${STAGE_FLAVOR}.txt"
    wget -q -N -P "${STAGE_DIR}" "${STAGE_INFO}"

    # Extract stage3 URL and name
    STAGE_BASEURL="${GENTOO_MIRROR}/releases/amd64/autobuilds"
    STAGE_URL="${STAGE_BASEURL}/$(sed -n '3p' ${STAGE_DIR}/${STAGE_FLAVOR}.txt | awk '{print $1}')"
    STAGE_FILE="$(basename "${STAGE_URL}")"

    # Download the stage3
    echo "  --> Downloading Gentoo $DISTRO stage3..."
    wget -N -P "${STAGE_DIR}" "${STAGE_URL}"
    wget -N -P "${STAGE_DIR}" "${STAGE_URL}.DIGESTS.asc"

    # Extract the stage3
    echo "  --> Extracting Gentoo $DISTRO stage3..."
    tar xfp "${STAGE_DIR}/${STAGE_FILE}" -C "${INSTALLDIR}"

    ## PORTAGE
    # Download latest Portage
    echo "  --> Downloading latest Portage..."
    PORTAGE_URL="${GENTOO_MIRROR}/snapshots/portage-latest.tar.bz2"
    wget -N -P "${PORTAGE_DIR}" "${PORTAGE_URL}"
    wget -N -P "${PORTAGE_DIR}" "${PORTAGE_URL}.gpgsig"
    wget -N -P "${PORTAGE_DIR}" "${PORTAGE_URL}.md5sum"

    # Extract Portage
    echo "  --> Extracting latest Portage..."
    tar xfp "${PORTAGE_DIR}/portage-latest.tar.bz2" -C "${INSTALLDIR}/usr"

    # Configure Portage
    echo "  --> Configuring Portage..."
    mkdir -p "${INSTALLDIR}/usr/portage/distfiles"
    mkdir -p "${INSTALLDIR}/usr/portage/packages"
    cat >> "${INSTALLDIR}/etc/portage/make.conf" << EOF
GENTOO_MIRRORS=${GENTOO_MIRROR}
EMERGE_DEFAULT_OPTS="--autounmask-write y"
ACCEPT_KEYWORDS="~amd64"
ACCEPT_LICENSE="*"
EOF

    mkdir -p "${INSTALLDIR}/etc/portage/repos.conf"
    cp "${INSTALLDIR}/usr/share/portage/config/repos.conf" "${INSTALLDIR}/etc/portage/repos.conf/gentoo.conf"

    # Fix missing directory for the first emerge
    mkdir -p "${INSTALLDIR}/var/db/repos/gentoo"

    # # Prepare /dev nodes
    # mkdir -p "${INSTALLDIR}/dev/"
    # for f in null urandom zero random console; do
    #     cp -a /dev/$f "${INSTALLDIR}/dev/"
    # done

    # # Create loop devices as much as Mock does
    # if [ ! -e "${INSTALLDIR}/dev/loop-control" ]; then
    #     mknod -m 0666 "${INSTALLDIR}/dev/loop-control" c 10 237
    # fi

    # for i in $(seq 0 4)
    # do
    #     mknod -m 0666 "${INSTALLDIR}/dev/loop$i" b 7 "$i"
    # done

    prepareChroot "${INSTALLDIR}"
    mountCache "${CACHEDIR}" "${INSTALLDIR}"

    # Sync portage overlay
    chroot "${INSTALLDIR}" /bin/bash -l -c "emerge-webrsync"

    # Select default profile (default/linux/amd64/17.1/systemd)
    chroot "${INSTALLDIR}" /bin/bash -l -c "eselect profile set 29"

    # Disable py2.7 without altering the other flags
    cat > "${INSTALLDIR}/etc/portage/package.use/python27" << EOF
*/* PYTHON_TARGETS: -python2_7
EOF

    # Install needed dependencies
    pkgs="fakeroot sudo"
    chroot "${INSTALLDIR}" /bin/bash -l -c "emerge -b -k $pkgs"

    # Update system
    chroot "${INSTALLDIR}" /bin/bash -l -c "emerge --changed-use --deep @world"

    touch "${INSTALLDIR}/etc/.prepared_base"
fi

